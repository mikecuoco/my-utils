name: CI/CD

on:
  push:

jobs:
  setup_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load venv cache
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install

      - name: Run Tests
        run: |
          poetry run pytest

  build_release_conda:
    runs-on: ubuntu-latest
    needs: setup_test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Get latest python version
        id: get_python_version
        run: |
          echo "::set-output name=python_version::$(grep -Po '(?<=^python = ")[^"]*' pyproject.toml)"

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.get_python_version.outputs.python_version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load venv cache
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ steps.get_python_version.outputs.python_version }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install

      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Build python package
        run: |
          poetry build

      - name: Create and upload release
        run: |
          gh release create ${{ github.run_number }} dist/*tar.gz --notes "Release ${{ env.version }}" --title "Release ${{ env.version }}"
          url=$(gh api /repos/${{ github.repository }}/releases/tags/${{ github.run_number }} | jq -r '.assets[].browser_download_url')
          echo "browser_download_url=$url" >> $GITHUB_ENV
          sha=$(curl -L $url | sha256sum | cut -d ' ' -f 1)
          echo "sha256=$sha" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update recipe.yaml
        uses: mikefarah/yq@master
        env:
          file: conda.recipe/recipe.yaml
        with:
          cmd: |
            yq -i '.context.version = "${{ env.version }}"' '${{ env.file }}'
            yq -i '.source.url = "${{ env.browser_download_url }}"' '${{ env.file }}'
            yq -i '.source.sha256 = "${{ env.sha }}"' '${{ env.file }}'

      - name: Build conda package
        uses: prefix-dev/rattler-build-action@v0.2.25
        with:
          build-args: -c bioconda -c conda-forge

      - name: Upload conda package
        run: |
          for pkg in $(find output -type f \( -name "*.conda" -o -name "*.tar.bz2" \) ); do
            echo "Uploading ${pkg}"
            rattler-build upload prefix -c mikecuoco "${pkg}"
          done
        env:
          PREFIX_API_KEY: ${{ secrets.PREFIX_API_KEY }}

      - name: Commit changes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add conda.recipe/recipe.yaml
          git commit -m "Update recipe.yaml with new release"
          git push
