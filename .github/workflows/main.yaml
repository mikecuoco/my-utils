name: CI/CD

on:
  push:

jobs:
  setup_and_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true

    - name: Load venv cache
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install

    - name: Run Tests
      run: |
        poetry run pytest

  build_and_release:
    runs-on: ubuntu-latest
    needs: setup_and_tests

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: Get latest python version
      id: get_python_version
      run: |
        echo "::set-output name=python_version::$(grep -Po '(?<=^python = ")[^"]*' pyproject.toml)"

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.get_python_version.outputs.python_version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true

    - name: Load venv cache
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ steps.get_python_version.outputs.python_version }}-${{ hashFiles('poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install

    - name: Extract version from pyproject.toml
      id: extract_version
      run: |
        VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
        echo "version=$VERSION" >> $GITHUB_ENV

    - name: Build python package
      run: |
        poetry build

    - name: Determine if release is a draft
      id: is_draft
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "draft=false" >> $GITHUB_ENV
        else
          echo "draft=true" >> $GITHUB_ENV
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.version }}
        release_name: Release ${{ env.version }}
        body: |
          This release contains the built package from Poetry.
        draft: ${{ env.draft }}
        prerelease: false

    - name: Upload Release Asset
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/myutils-${{ env.version }}.tar.gz
        asset_name: myutils-${{ env.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Update recipe.yaml
      uses: mikefarah/yq@master
      env:
        file: recipe.yaml
      with:
        cmd: |
          yq -i '.context.version = "${{ env.version }}"' '${{ env.file }}'
          yq -i '.source.url = "${{ steps.upload_release_asset.outputs.browser_download_url }}"' '${{ env.file }}'
          sha=$(sha256sum dist/myutils-${{ env.version }}.tar.gz | cut -d ' ' -f 1)
          echo "sha=$sha" >> $GITHUB_ENV
          yq -i '.source.sha256 = "${{ env.sha }}"' '${{ env.file }}'

    - name: Commit changes
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add recipe.yaml
        git commit -m "Update recipe.yaml with new release"
        git push

    - name: Build conda package
      uses: prefix-dev/rattler-build-action@v0.2.25
      with:
        recipe_path: recipe.yaml
        upload_artifact: true
        build-args: -c bioconda -c conda-forge
