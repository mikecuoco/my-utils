name: CI/CD Workflow

on:
  push:

jobs:
  setup_and_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1

    - name: Set up cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install

    - name: Run Tests
      run: |
        poetry run pytest

  build_and_release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: setup_and_tests

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: Reuse setup from previous job
      run: |
        poetry config virtualenvs.in-project true
        poetry install

    - name: Extract version from pyproject.toml
      id: extract_version
      run: |
        VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
        echo "version=$VERSION" >> $GITHUB_ENV

    - name: Build
      run: |
        poetry build

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.version }}
        release_name: Release ${{ env.version }}
        body: |
          This release contains the built package from Poetry.
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/myutils-${{ env.version }}.tar.gz
        asset_name: myutils-${{ env.version }}.tar.gz
        asset_content_type: application/gzip
